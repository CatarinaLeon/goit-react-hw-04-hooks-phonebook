{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/SearchFilter/SearchFilter.jsx","components/ContactList/ContactList.jsx","components/App/App.jsx","services/localStorage.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","className","style","contactform","preventDefault","type","pattern","title","required","onChange","htmlFor","Filter","filter","ContactList","contacts","onClick","handleDeleteBtn","map","id","App","setFilter","setContacts","useEffect","key","JSON","parse","localStorage","getItem","error","storage","length","setItem","stringify","contactName","nanoid","normalizedName","toLowerCase","find","contact","alert","currentTarget","includes","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b11fb5f0.chunk.js","sourcesContent":["import { useState } from 'react'\n// import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport style from \"./ContactForm.module.css\";\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\nconst handleChange = (event) => {\n    const { name, value } = event.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\nconst handleSubmit = (event) => {\n    event.preventDefault();\n    onSubmit(name, number);\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n      <div className={style.contactform}>\n        <form onSubmit={handleSubmit}>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              onChange={handleChange}\n            />\n          </label>\n          <label htmlFor=\"\">\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              onChange={handleChange}\n            />\n          </label>\n          <button type=\"submit\">Add contact</button>\n        </form>\n      </div>\n    );\n}\n\n// class ContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\",\n//   };\n\n//   handleChange = (event) => {\n//     const { name, value } = event.target;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     const { name, number } = this.state;\n//     this.props.onSubmit(name, number);\n//     this.resetState();\n//   };\n\n//   resetState = () => {\n//     this.setState({ name: \"\", number: \"\" });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <div className={style.contactform}>\n//         <form onSubmit={this.handleSubmit}>\n//           <label>\n//             Name\n//             <input\n//               type=\"text\"\n//               name=\"name\"\n//               value={name}\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//               required\n//               onChange={this.handleChange}\n//             />\n//           </label>\n//           <label htmlFor=\"\">\n//             Number\n//             <input\n//               type=\"tel\"\n//               name=\"number\"\n//               value={number}\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//               required\n//               onChange={this.handleChange}\n//             />\n//           </label>\n//           <button type=\"submit\">Add contact</button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default ContactForm;\n","import PropTypes from \"prop-types\";\n\nconst Filter = ({ filter, onChange }) => (\n  <div>\n    <label>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" value={filter} onChange={onChange} />\n    </label>\n  </div>\n);\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import PropTypes from \"prop-types\";\n\nconst ContactList = ({ contacts, onClick }) => {\n  const handleDeleteBtn = (event) => {\n    const { name } = event.target;\n    onClick(name);\n  };\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <p> {name}</p>\n          <p> {number}</p>\n\n          <button type=\"button\" name={id} onClick={handleDeleteBtn}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\nexport default ContactList;\n","import { useState, useEffect  } from 'react'\n// import React, { Component } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport ContactForm from \"../ContactForm/ContactForm.jsx\";\nimport Filter from \"../SearchFilter/SearchFilter.jsx\";\nimport ContactList from \"../ContactList/ContactList.jsx\";\nimport * as storage from \"../../services/localStorage\";\n\nconst App = () => {\n  const [filter, setFilter] = useState('')\n  const [contacts, setContacts] = useState([])\n\n  useEffect(() => {\n    const contacts = storage.get(\"contacts\");\n    if (contacts && contacts.length > 0) {\n      setContacts(contacts);\n    }\n  }, []);\n\n  useEffect(() => {\n    storage.save(\"contacts\", contacts);\n  }, [contacts]);\n\n  const addNewContact = (name, number) => {\n    const contactName = { name, number, id: nanoid() };\n    const normalizedName = name.toLowerCase();\n    const duplicateName = contacts.find(\n      (contact) => contact.name.toLowerCase() === normalizedName\n    );\n\n    if (duplicateName) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    if (name === \"\") {\n      alert(`Please type your info in the field. It is empty.`);\n    } else {\n     setContacts([...contacts, contactName]);\n    }\n  };\n\n  const deleteContact = (id) => {\n    setContacts(contacts.filter((contact) => contact.id !== id))\n  };\n\n  const filterContacts = () => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const updateFilter = (event) => {\n    setFilter(event.currentTarget.value);\n  };\n\n    return (\n      <>\n        <div>\n          <h1>Phonebook</h1>\n          <ContactForm onSubmit={addNewContact} />\n          <h2>Contacts</h2>\n          <Filter filter={filter} onChange={updateFilter} />\n          <ContactList\n            contacts={filterContacts()}\n            onClick={deleteContact}\n          />\n        </div>\n      </>\n    );\n}\n\n\n\n// class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//   };\n\n  // componentDidMount() {\n  //   const savedContacts = storage.get(\"contacts\");\n  //   if (savedContacts) {\n  //     this.setState({ contacts: savedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   const { contacts } = this.state;\n  //   if (prevState.contacts !== contacts) {\n  //     storage.save(\"contacts\", contacts);\n  //   }\n  // }\n\n  // addNewContact = (name, number) => {\n  //   const contactName = { name, number, id: nanoid() };\n  //   const normalizedName = name.toLowerCase();\n  //   const duplicateName = this.state.contacts.find(\n  //     (contact) => contact.name.toLowerCase() === normalizedName\n  //   );\n\n  //   if (duplicateName) {\n  //     alert(`${name} is already in contacts.`);\n  //     return;\n  //   }\n  //   if (name === \"\") {\n  //     alert(`Please type your info in the field. It is empty.`);\n  //   } else {\n  //     this.setState(({ contacts }) => ({\n  //       contacts: [...contacts, contactName],\n  //     }));\n  //   }\n  // };\n\n  // deleteContact = (id) => {\n  //   this.setState((prevState) => ({\n  //     contacts: prevState.contacts.filter((contact) => contact.id !== id),\n  //   }));\n  // };\n\n  // filterContacts = () => {\n  //   const { filter, contacts } = this.state;\n\n  //   return contacts.filter(({ name }) =>\n  //     name.toLowerCase().includes(filter.toLowerCase())\n  //   );\n  // };\n\n  // updateFilter = (event) => {\n  //   const { value } = event.target;\n  //   this.setState({ filter: value });\n  // };\n\n//   render() {\n//     const { filter } = this.state;\n//     const filteredContacts = this.filterContacts();\n//     return (\n//       <>\n//         <div>\n//           <h1>Phonebook</h1>\n//           <ContactForm onSubmit={this.addNewContact} />\n//           <h2>Contacts</h2>\n//           <Filter filter={filter} onChange={this.updateFilter} />\n//           <ContactList\n//             contacts={filteredContacts}\n//             onClick={this.deleteContact}\n//           />\n//         </div>\n//       </>\n//     );\n//   }\n// }\n\nexport default App;\n","// ф-ция сохранения в локал стор\nconst save = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    return null;\n  }\n};\n\n// ф-ция получения в локал стор (считывает данные и парсит их)\nconst get = (key) => {\n  try {\n    return JSON.parse(localStorage.getItem(key));\n  } catch (error) {\n    return null;\n  }\n};\n// ф-ция удаления с локал стор\nconst remove = (key) => {\n  try {\n    return localStorage.removeItem(key);\n  } catch (error) {\n    return null;\n  }\n};\n\nexport { get, save, remove };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactform\":\"ContactForm_contactform__23LQN\"};"],"sourceRoot":""}